// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetMutationParams creates a new GetMutationParams object
//
// There are no default values defined in the spec.
func NewGetMutationParams() GetMutationParams {

	return GetMutationParams{}
}

// GetMutationParams contains all the bound params for the get mutation operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetMutation
type GetMutationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	AccountNo string
	/*
	  Required: true
	  In: query
	*/
	EndDate int64
	/*
	  Required: true
	  In: query
	*/
	StartDate int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMutationParams() beforehand.
func (o *GetMutationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccountNo, qhkAccountNo, _ := qs.GetOK("account_no")
	if err := o.bindAccountNo(qAccountNo, qhkAccountNo, route.Formats); err != nil {
		res = append(res, err)
	}

	qEndDate, qhkEndDate, _ := qs.GetOK("end_date")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("start_date")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAccountNo binds and validates parameter AccountNo from query.
func (o *GetMutationParams) bindAccountNo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("account_no", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("account_no", "query", raw); err != nil {
		return err
	}
	o.AccountNo = raw

	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *GetMutationParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("end_date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("end_date", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("end_date", "query", "int64", raw)
	}
	o.EndDate = value

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *GetMutationParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("start_date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("start_date", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("start_date", "query", "int64", raw)
	}
	o.StartDate = value

	return nil
}
