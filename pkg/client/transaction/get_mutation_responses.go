// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/yahfiilham/gold-store-demo/pkg/models"
)

// GetMutationReader is a Reader for the GetMutation structure.
type GetMutationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMutationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMutationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetMutationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMutationOK creates a GetMutationOK with default headers values
func NewGetMutationOK() *GetMutationOK {
	return &GetMutationOK{}
}

/* GetMutationOK describes a response with status code 200, with default header values.

success
*/
type GetMutationOK struct {
	Payload *GetMutationOKBody
}

// IsSuccess returns true when this get mutation o k response has a 2xx status code
func (o *GetMutationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get mutation o k response has a 3xx status code
func (o *GetMutationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get mutation o k response has a 4xx status code
func (o *GetMutationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get mutation o k response has a 5xx status code
func (o *GetMutationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get mutation o k response a status code equal to that given
func (o *GetMutationOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMutationOK) Error() string {
	return fmt.Sprintf("[GET /mutation][%d] getMutationOK  %+v", 200, o.Payload)
}

func (o *GetMutationOK) String() string {
	return fmt.Sprintf("[GET /mutation][%d] getMutationOK  %+v", 200, o.Payload)
}

func (o *GetMutationOK) GetPayload() *GetMutationOKBody {
	return o.Payload
}

func (o *GetMutationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMutationOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMutationDefault creates a GetMutationDefault with default headers values
func NewGetMutationDefault(code int) *GetMutationDefault {
	return &GetMutationDefault{
		_statusCode: code,
	}
}

/* GetMutationDefault describes a response with status code -1, with default header values.

error
*/
type GetMutationDefault struct {
	_statusCode int

	Payload *models.BaseResponse
}

// Code gets the status code for the get mutation default response
func (o *GetMutationDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get mutation default response has a 2xx status code
func (o *GetMutationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get mutation default response has a 3xx status code
func (o *GetMutationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get mutation default response has a 4xx status code
func (o *GetMutationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get mutation default response has a 5xx status code
func (o *GetMutationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get mutation default response a status code equal to that given
func (o *GetMutationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetMutationDefault) Error() string {
	return fmt.Sprintf("[GET /mutation][%d] GetMutation default  %+v", o._statusCode, o.Payload)
}

func (o *GetMutationDefault) String() string {
	return fmt.Sprintf("[GET /mutation][%d] GetMutation default  %+v", o._statusCode, o.Payload)
}

func (o *GetMutationDefault) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *GetMutationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetMutationOKBody get mutation o k body
swagger:model GetMutationOKBody
*/
type GetMutationOKBody struct {

	// data
	Data []*models.Transaction `json:"data"`
}

// Validate validates this get mutation o k body
func (o *GetMutationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMutationOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMutationOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMutationOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get mutation o k body based on the context it is used
func (o *GetMutationOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMutationOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMutationOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMutationOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMutationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMutationOKBody) UnmarshalBinary(b []byte) error {
	var res GetMutationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
